// Code generated by goyacc -o query.go -p query query.y. DO NOT EDIT.

//line query.y:2
package selector

import __yyfmt__ "fmt"

//line query.y:2

import (
	"regexp"
)

//line query.y:9
type querySymType struct {
	yys    int
	query  Query
	path   Path
	axis   *Axis
	step   *Step
	expr   Expr
	args   []Expr
	regexp *regexp.Regexp
	err    error
	str    string
	num    int64
}

const REGEXP = 57346
const ERR = 57347
const ID = 57348
const STR = 57349
const TRUE = 57350
const FALSE = 57351
const NULL = 57352
const LSHIFT = 57353
const RSHIFT = 57354
const AND = 57355
const OR = 57356
const EQ = 57357
const NE = 57358
const LTE = 57359
const GTE = 57360
const MATCH = 57361
const NONMATCH = 57362
const ELSE_OR = 57363
const NUM = 57364

var queryToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'['",
	"']'",
	"'('",
	"')'",
	"':'",
	"'@'",
	"'.'",
	"','",
	"REGEXP",
	"ERR",
	"ID",
	"STR",
	"TRUE",
	"FALSE",
	"NULL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'^'",
	"'%'",
	"'>'",
	"'<'",
	"'!'",
	"'~'",
	"'&'",
	"'|'",
	"'?'",
	"LSHIFT",
	"RSHIFT",
	"AND",
	"OR",
	"EQ",
	"NE",
	"LTE",
	"GTE",
	"MATCH",
	"NONMATCH",
	"ELSE_OR",
	"NUM",
	"'{'",
	"'}'",
}
var queryStatenames = [...]string{}

const queryEofCode = 1
const queryErrCode = 2
const queryInitialStackSize = 16

//line query.y:298

//line yacctab:1
var queryExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const queryPrivate = 57344

const queryLast = 150

var queryAct = [...]int{

	36, 37, 43, 42, 40, 38, 20, 117, 79, 80,
	56, 81, 82, 50, 72, 106, 54, 22, 49, 52,
	57, 58, 59, 92, 91, 73, 75, 76, 35, 22,
	60, 39, 41, 70, 87, 88, 89, 90, 85, 86,
	61, 69, 28, 7, 8, 77, 83, 53, 51, 4,
	9, 113, 21, 19, 27, 56, 68, 104, 50, 67,
	66, 54, 65, 49, 52, 57, 58, 59, 105, 64,
	33, 3, 32, 31, 107, 108, 30, 41, 29, 26,
	109, 101, 102, 110, 19, 62, 63, 103, 111, 112,
	34, 120, 53, 51, 56, 121, 114, 50, 18, 119,
	54, 116, 49, 52, 57, 58, 59, 25, 12, 118,
	100, 71, 7, 8, 22, 1, 55, 14, 13, 9,
	11, 122, 123, 17, 16, 93, 15, 84, 78, 74,
	24, 53, 51, 94, 95, 96, 97, 99, 98, 5,
	10, 115, 48, 47, 46, 45, 23, 44, 6, 2,
}
var queryPact = [...]int{

	98, -1000, 87, 98, -1000, 25, 29, -1000, -1000, -1000,
	99, 57, 32, 56, 54, 51, 50, 48, 98, -1000,
	-1000, 110, 4, 13, -1000, 71, -1000, 47, 40, 38,
	37, 34, 19, 11, 98, -1000, 106, -17, -8, 49,
	-21, 88, -2, 114, -1000, -1000, -1000, -1000, -1000, 104,
	67, 73, -1000, -1000, -1000, -1000, 4, -1000, -1000, -1000,
	-1000, 110, -1000, -1000, -1000, -7, -1000, -1000, -1000, -1000,
	-1000, -1000, 4, 4, 49, -1000, -1000, -1000, 88, -1000,
	-1000, -1000, -1000, -1000, 88, 77, 39, -1000, -1000, -1000,
	-1000, -1000, -1000, 88, -1000, -1000, -1000, -1000, -1000, -1000,
	4, -1000, -1000, -38, 102, -1000, -1000, 91, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 84, -1000, -1000, -1000, 4,
	-1000, 4, -1000, -1000,
}
var queryPgo = [...]int{

	0, 149, 71, 148, 49, 6, 147, 145, 144, 143,
	142, 0, 1, 5, 4, 3, 2, 141, 140, 130,
	139, 129, 128, 127, 125, 116, 115,
}
var queryR1 = [...]int{

	0, 26, 1, 1, 2, 2, 4, 4, 4, 4,
	4, 4, 20, 20, 20, 5, 3, 3, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 19, 19, 11, 11, 11, 12, 12, 12,
	21, 21, 13, 13, 13, 22, 22, 22, 22, 14,
	14, 14, 14, 23, 23, 23, 23, 23, 23, 15,
	15, 24, 24, 24, 24, 24, 24, 16, 16, 16,
	16, 16, 6, 17, 17, 17, 7, 7, 8, 9,
	9, 9, 9, 25, 25, 25, 10,
}
var queryR2 = [...]int{

	0, 1, 1, 3, 1, 2, 1, 2, 3, 2,
	3, 4, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 3, 2, 3, 2, 3, 3, 4,
	3, 3, 2, 2, 1, 5, 3, 1, 3, 2,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 0, 1, 3, 2, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 3,
}
var queryChk = [...]int{

	-1000, -26, -1, -2, -4, -20, -3, 14, 15, 21,
	-18, 22, 10, 20, 19, 28, 26, 25, 11, -4,
	-5, 27, 4, -20, -19, 8, 22, 22, 10, 22,
	22, 22, 22, 22, -2, -5, -11, -12, -13, 27,
	-14, 28, -15, -16, -6, -7, -8, -9, -10, 14,
	9, 44, 15, 43, 12, -25, 6, 16, 17, 18,
	-5, 27, 14, 15, 22, 22, 22, 22, 22, 22,
	22, 5, 31, 42, -21, 34, 35, -13, -22, 29,
	30, 32, 33, -14, -23, 40, 41, 36, 37, 38,
	39, 26, 25, -24, 19, 20, 21, 22, 24, 23,
	6, 14, 15, 14, -11, -5, 22, -12, -12, -13,
	-14, -15, 12, 12, -16, -17, -11, 45, 7, 8,
	7, 11, -12, -11,
}
var queryDef = [...]int{

	0, -2, 1, 2, 4, 6, 0, 12, 13, 14,
	16, 18, 0, 0, 0, 0, 0, 0, 0, 5,
	7, 0, 0, 9, 17, 0, 19, 20, 0, 22,
	24, 26, 0, 0, 3, 8, 0, 34, 37, 0,
	42, 0, 49, 59, 67, 68, 69, 70, 71, 0,
	0, 0, 79, 80, 81, 82, 0, 83, 84, 85,
	10, 0, 32, 33, 21, 28, 23, 25, 27, 30,
	31, 15, 0, 0, 0, 40, 41, 39, 0, 45,
	46, 47, 48, 44, 0, 0, 0, 53, 54, 55,
	56, 57, 58, 0, 61, 62, 63, 64, 65, 66,
	73, 76, 77, 0, 0, 11, 29, 0, 36, 38,
	43, 50, 51, 52, 60, 0, 74, 78, 86, 0,
	72, 0, 35, 75,
}
var queryTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 3, 3, 24, 29, 3,
	6, 7, 21, 19, 11, 20, 10, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 8, 3,
	26, 3, 25, 31, 9, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 5, 23, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 30, 45, 28,
}
var queryTok2 = [...]int{

	2, 3, 12, 13, 14, 15, 16, 17, 18, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43,
}
var queryTok3 = [...]int{
	0,
}

var queryErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	queryDebug        = 0
	queryErrorVerbose = false
)

type queryLexer interface {
	Lex(lval *querySymType) int
	Error(s string)
}

type queryParser interface {
	Parse(queryLexer) int
	Lookahead() int
}

type queryParserImpl struct {
	lval  querySymType
	stack [queryInitialStackSize]querySymType
	char  int
}

func (p *queryParserImpl) Lookahead() int {
	return p.char
}

func queryNewParser() queryParser {
	return &queryParserImpl{}
}

const queryFlag = -1000

func queryTokname(c int) string {
	if c >= 1 && c-1 < len(queryToknames) {
		if queryToknames[c-1] != "" {
			return queryToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func queryStatname(s int) string {
	if s >= 0 && s < len(queryStatenames) {
		if queryStatenames[s] != "" {
			return queryStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func queryErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !queryErrorVerbose {
		return "syntax error"
	}

	for _, e := range queryErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + queryTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := queryPact[state]
	for tok := TOKSTART; tok-1 < len(queryToknames); tok++ {
		if n := base + tok; n >= 0 && n < queryLast && queryChk[queryAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if queryDef[state] == -2 {
		i := 0
		for queryExca[i] != -1 || queryExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; queryExca[i] >= 0; i += 2 {
			tok := queryExca[i]
			if tok < TOKSTART || queryExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if queryExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += queryTokname(tok)
	}
	return res
}

func querylex1(lex queryLexer, lval *querySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = queryTok1[0]
		goto out
	}
	if char < len(queryTok1) {
		token = queryTok1[char]
		goto out
	}
	if char >= queryPrivate {
		if char < queryPrivate+len(queryTok2) {
			token = queryTok2[char-queryPrivate]
			goto out
		}
	}
	for i := 0; i < len(queryTok3); i += 2 {
		token = queryTok3[i+0]
		if token == char {
			token = queryTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = queryTok2[1] /* unknown char */
	}
	if queryDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", queryTokname(token), uint(char))
	}
	return char, token
}

func queryParse(querylex queryLexer) int {
	return queryNewParser().Parse(querylex)
}

func (queryrcvr *queryParserImpl) Parse(querylex queryLexer) int {
	var queryn int
	var queryVAL querySymType
	var queryDollar []querySymType
	_ = queryDollar // silence set and not used
	queryS := queryrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	querystate := 0
	queryrcvr.char = -1
	querytoken := -1 // queryrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		querystate = -1
		queryrcvr.char = -1
		querytoken = -1
	}()
	queryp := -1
	goto querystack

ret0:
	return 0

ret1:
	return 1

querystack:
	/* put a state and value onto the stack */
	if queryDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", queryTokname(querytoken), queryStatname(querystate))
	}

	queryp++
	if queryp >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryS[queryp] = queryVAL
	queryS[queryp].yys = querystate

querynewstate:
	queryn = queryPact[querystate]
	if queryn <= queryFlag {
		goto querydefault /* simple state */
	}
	if queryrcvr.char < 0 {
		queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
	}
	queryn += querytoken
	if queryn < 0 || queryn >= queryLast {
		goto querydefault
	}
	queryn = queryAct[queryn]
	if queryChk[queryn] == querytoken { /* valid shift */
		queryrcvr.char = -1
		querytoken = -1
		queryVAL = queryrcvr.lval
		querystate = queryn
		if Errflag > 0 {
			Errflag--
		}
		goto querystack
	}

querydefault:
	/* default state action */
	queryn = queryDef[querystate]
	if queryn == -2 {
		if queryrcvr.char < 0 {
			queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if queryExca[xi+0] == -1 && queryExca[xi+1] == querystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			queryn = queryExca[xi+0]
			if queryn < 0 || queryn == querytoken {
				break
			}
		}
		queryn = queryExca[xi+1]
		if queryn < 0 {
			goto ret0
		}
	}
	if queryn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			querylex.Error(queryErrorMessage(querystate, querytoken))
			Nerrs++
			if queryDebug >= 1 {
				__yyfmt__.Printf("%s", queryStatname(querystate))
				__yyfmt__.Printf(" saw %s\n", queryTokname(querytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for queryp >= 0 {
				queryn = queryPact[queryS[queryp].yys] + queryErrCode
				if queryn >= 0 && queryn < queryLast {
					querystate = queryAct[queryn] /* simulate a shift of "error" */
					if queryChk[querystate] == queryErrCode {
						goto querystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if queryDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", queryS[queryp].yys)
				}
				queryp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if queryDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", queryTokname(querytoken))
			}
			if querytoken == queryEofCode {
				goto ret1
			}
			queryrcvr.char = -1
			querytoken = -1
			goto querynewstate /* try again in the same state */
		}
	}

	/* reduction by production queryn */
	if queryDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", queryn, queryStatname(querystate))
	}

	querynt := queryn
	querypt := queryp
	_ = querypt // guard against "declared and not used"

	queryp -= queryR2[queryn]
	// queryp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if queryp+1 >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryVAL = queryS[queryp+1]

	/* consult goto table to find next state */
	queryn = queryR1[queryn]
	queryg := queryPgo[queryn]
	queryj := queryg + queryS[queryp].yys + 1

	if queryj >= queryLast {
		querystate = queryAct[queryg]
	} else {
		querystate = queryAct[queryj]
		if queryChk[querystate] != -queryn {
			querystate = queryAct[queryg]
		}
	}
	// dummy call; replaced with literal code
	switch querynt {

	case 1:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:46
		{
			querylex.(*queryLexerImpl).result = queryDollar[1].query
		}
	case 2:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:53
		{
			queryVAL.query = Query{queryDollar[1].path}
		}
	case 3:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:57
		{
			queryVAL.query = append(queryDollar[1].query, queryDollar[3].path)
		}
	case 4:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:64
		{
			queryVAL.path = Path{queryDollar[1].step}
		}
	case 5:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:68
		{
			queryVAL.path = append(queryDollar[1].path, queryDollar[2].step)
		}
	case 6:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:75
		{
			queryVAL.step = &Step{Match: queryDollar[1].str}
		}
	case 7:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:79
		{
			queryVAL.step = &Step{Match: queryDollar[1].str, Filter: queryDollar[2].expr}
		}
	case 8:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:83
		{
			queryVAL.step = &Step{Match: queryDollar[1].str, Filter: queryDollar[3].expr}
		}
	case 9:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:87
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str}
		}
	case 10:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:91
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str, Filter: queryDollar[3].expr}
		}
	case 11:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:95
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str, Filter: queryDollar[4].expr}
		}
	case 15:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:108
		{
			queryVAL.expr = queryDollar[2].expr
		}
	case 16:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:115
		{
			queryVAL.axis = &Axis{Dir: queryDollar[1].str}
		}
	case 17:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:119
		{
			queryVAL.axis = &Axis{queryDollar[1].str, queryDollar[2].str}
		}
	case 18:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:125
		{
			queryVAL.str = "/"
		}
	case 19:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:126
		{
			queryVAL.str = "//"
		}
	case 20:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:127
		{
			queryVAL.str = "./"
		}
	case 21:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:128
		{
			queryVAL.str = ".//"
		}
	case 22:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:129
		{
			queryVAL.str = "-/"
		}
	case 23:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:130
		{
			queryVAL.str = "-//"
		}
	case 24:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:131
		{
			queryVAL.str = "+/"
		}
	case 25:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:132
		{
			queryVAL.str = "+//"
		}
	case 26:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:133
		{
			queryVAL.str = "~/"
		}
	case 27:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:134
		{
			queryVAL.str = "~//"
		}
	case 28:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:135
		{
			queryVAL.str = "../"
		}
	case 29:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:136
		{
			queryVAL.str = "..//"
		}
	case 30:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:137
		{
			queryVAL.str = "<//"
		}
	case 31:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:138
		{
			queryVAL.str = ">//"
		}
	case 32:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:142
		{
			queryVAL.str = queryDollar[2].str
		}
	case 33:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:143
		{
			queryVAL.str = queryDollar[2].str
		}
	case 35:
		queryDollar = queryS[querypt-5 : querypt+1]
//line query.y:149
		{
			queryVAL.expr = &Cond{queryDollar[1].expr, queryDollar[3].expr, queryDollar[5].expr}
		}
	case 36:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:153
		{
			queryVAL.expr = &Cond{queryDollar[1].expr, nil, queryDollar[3].expr}
		}
	case 38:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:161
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 39:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:165
		{
			queryVAL.expr = &Unary{queryDollar[1].str, queryDollar[2].expr}
		}
	case 43:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:178
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 44:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:182
		{
			queryVAL.expr = &Unary{queryDollar[1].str, queryDollar[2].expr}
		}
	case 50:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:197
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 51:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:201
		{
			queryVAL.expr = &Match{queryDollar[1].expr, queryDollar[3].regexp}
		}
	case 52:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:205
		{
			queryVAL.expr = &Unary{"!", &Match{queryDollar[1].expr, queryDollar[3].regexp}}
		}
	case 60:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:222
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 72:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:246
		{
			queryVAL.expr = &FuncCall{queryDollar[1].str, queryDollar[3].args}
		}
	case 73:
		queryDollar = queryS[querypt-0 : querypt+1]
//line query.y:253
		{
			queryVAL.args = nil
		}
	case 74:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:257
		{
			queryVAL.args = []Expr{queryDollar[1].expr}
		}
	case 75:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:261
		{
			queryVAL.args = append(queryDollar[1].args, queryDollar[3].expr)
		}
	case 76:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:267
		{
			queryVAL.expr = &WithAttr{queryDollar[2].str}
		}
	case 77:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:268
		{
			queryVAL.expr = &WithAttr{queryDollar[2].str}
		}
	case 78:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:273
		{
			queryVAL.expr = QueryParam(queryDollar[2].str)
		}
	case 79:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:279
		{
			queryVAL.expr = Str(queryDollar[1].str)
		}
	case 80:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:280
		{
			queryVAL.expr = Num(queryDollar[1].num)
		}
	case 81:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:281
		{
			queryVAL.expr = queryDollar[1].regexp
		}
	case 82:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:282
		{
			queryVAL.expr = Keyword(queryDollar[1].str)
		}
	case 86:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:293
		{
			queryVAL.expr = queryDollar[2].expr
		}
	}
	goto querystack /* stack new state and value */
}
