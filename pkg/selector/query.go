// Code generated by goyacc -o query.go -p query query.y. DO NOT EDIT.

//line query.y:2
package selector

import __yyfmt__ "fmt"

//line query.y:2

//line query.y:6
type querySymType struct {
	yys   int
	query Query
	str   string
	num   int
}

const STR = 57346
const LAST = 57347
const POSITION = 57348
const NUM = 57349

var queryToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'/'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'*'",
	"'='",
	"':'",
	"'@'",
	"'.'",
	"'\"'",
	"'>'",
	"'<'",
	"'!'",
	"STR",
	"LAST",
	"POSITION",
	"NUM",
}
var queryStatenames = [...]string{}

const queryEofCode = 1
const queryErrCode = 2
const queryInitialStackSize = 16

//line query.y:99

//line yacctab:1
var queryExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const queryPrivate = 57344

const queryLast = 51

var queryAct = [...]int{

	20, 38, 4, 8, 42, 8, 44, 17, 18, 19,
	16, 5, 33, 8, 7, 26, 7, 35, 36, 34,
	10, 3, 37, 8, 7, 29, 9, 41, 40, 30,
	39, 2, 14, 15, 7, 28, 27, 21, 22, 24,
	13, 23, 45, 43, 31, 25, 12, 11, 1, 32,
	6,
}
var queryPact = [...]int{

	-2, -1000, -1000, -1000, 16, 43, 41, -1000, -2, -1000,
	-4, 6, -12, 29, -1000, -1000, -4, 34, 32, 39,
	-3, -1000, -1000, 28, 27, -1000, 19, 38, 2, -1000,
	8, -1000, -20, -1000, 20, 18, 17, -14, 37, -1000,
	-1000, -1000, -8, -1000, 36, -1000,
}
var queryPgo = [...]int{

	0, 31, 21, 50, 49, 48,
}
var queryR1 = [...]int{

	0, 5, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 4, 4, 4, 4, 4, 4, 3,
	3,
}
var queryR2 = [...]int{

	0, 1, 1, 2, 3, 3, 4, 1, 6, 8,
	4, 5, 9, 1, 2, 1, 1, 2, 2, 1,
	3,
}
var queryChk = [...]int{

	-1000, -5, -1, -2, 4, 13, -3, 18, 7, -2,
	4, 4, 5, -1, -2, -2, 4, 19, 20, 21,
	12, 8, -2, 7, 7, 6, 18, 8, 8, 6,
	10, 6, -4, 10, 17, 15, 16, 14, 21, 10,
	10, 10, 18, 6, 14, 6,
}
var queryDef = [...]int{

	0, -2, 1, 2, 0, 0, 7, 19, 0, 3,
	0, 0, 0, 0, 4, 5, 0, 0, 0, 0,
	0, 20, 6, 0, 0, 10, 0, 0, 0, 11,
	0, 8, 0, 13, 0, 15, 16, 0, 0, 14,
	17, 18, 0, 9, 0, 12,
}
var queryTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 14, 3, 3, 3, 3, 3,
	7, 8, 9, 3, 3, 3, 13, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 11, 3,
	16, 10, 15, 3, 12, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 3, 6,
}
var queryTok2 = [...]int{

	2, 3, 18, 19, 20, 21,
}
var queryTok3 = [...]int{
	0,
}

var queryErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	queryDebug        = 0
	queryErrorVerbose = false
)

type queryLexer interface {
	Lex(lval *querySymType) int
	Error(s string)
}

type queryParser interface {
	Parse(queryLexer) int
	Lookahead() int
}

type queryParserImpl struct {
	lval  querySymType
	stack [queryInitialStackSize]querySymType
	char  int
}

func (p *queryParserImpl) Lookahead() int {
	return p.char
}

func queryNewParser() queryParser {
	return &queryParserImpl{}
}

const queryFlag = -1000

func queryTokname(c int) string {
	if c >= 1 && c-1 < len(queryToknames) {
		if queryToknames[c-1] != "" {
			return queryToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func queryStatname(s int) string {
	if s >= 0 && s < len(queryStatenames) {
		if queryStatenames[s] != "" {
			return queryStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func queryErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !queryErrorVerbose {
		return "syntax error"
	}

	for _, e := range queryErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + queryTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := queryPact[state]
	for tok := TOKSTART; tok-1 < len(queryToknames); tok++ {
		if n := base + tok; n >= 0 && n < queryLast && queryChk[queryAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if queryDef[state] == -2 {
		i := 0
		for queryExca[i] != -1 || queryExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; queryExca[i] >= 0; i += 2 {
			tok := queryExca[i]
			if tok < TOKSTART || queryExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if queryExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += queryTokname(tok)
	}
	return res
}

func querylex1(lex queryLexer, lval *querySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = queryTok1[0]
		goto out
	}
	if char < len(queryTok1) {
		token = queryTok1[char]
		goto out
	}
	if char >= queryPrivate {
		if char < queryPrivate+len(queryTok2) {
			token = queryTok2[char-queryPrivate]
			goto out
		}
	}
	for i := 0; i < len(queryTok3); i += 2 {
		token = queryTok3[i+0]
		if token == char {
			token = queryTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = queryTok2[1] /* unknown char */
	}
	if queryDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", queryTokname(token), uint(char))
	}
	return char, token
}

func queryParse(querylex queryLexer) int {
	return queryNewParser().Parse(querylex)
}

func (queryrcvr *queryParserImpl) Parse(querylex queryLexer) int {
	var queryn int
	var queryVAL querySymType
	var queryDollar []querySymType
	_ = queryDollar // silence set and not used
	queryS := queryrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	querystate := 0
	queryrcvr.char = -1
	querytoken := -1 // queryrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		querystate = -1
		queryrcvr.char = -1
		querytoken = -1
	}()
	queryp := -1
	goto querystack

ret0:
	return 0

ret1:
	return 1

querystack:
	/* put a state and value onto the stack */
	if queryDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", queryTokname(querytoken), queryStatname(querystate))
	}

	queryp++
	if queryp >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryS[queryp] = queryVAL
	queryS[queryp].yys = querystate

querynewstate:
	queryn = queryPact[querystate]
	if queryn <= queryFlag {
		goto querydefault /* simple state */
	}
	if queryrcvr.char < 0 {
		queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
	}
	queryn += querytoken
	if queryn < 0 || queryn >= queryLast {
		goto querydefault
	}
	queryn = queryAct[queryn]
	if queryChk[queryn] == querytoken { /* valid shift */
		queryrcvr.char = -1
		querytoken = -1
		queryVAL = queryrcvr.lval
		querystate = queryn
		if Errflag > 0 {
			Errflag--
		}
		goto querystack
	}

querydefault:
	/* default state action */
	queryn = queryDef[querystate]
	if queryn == -2 {
		if queryrcvr.char < 0 {
			queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if queryExca[xi+0] == -1 && queryExca[xi+1] == querystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			queryn = queryExca[xi+0]
			if queryn < 0 || queryn == querytoken {
				break
			}
		}
		queryn = queryExca[xi+1]
		if queryn < 0 {
			goto ret0
		}
	}
	if queryn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			querylex.Error(queryErrorMessage(querystate, querytoken))
			Nerrs++
			if queryDebug >= 1 {
				__yyfmt__.Printf("%s", queryStatname(querystate))
				__yyfmt__.Printf(" saw %s\n", queryTokname(querytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for queryp >= 0 {
				queryn = queryPact[queryS[queryp].yys] + queryErrCode
				if queryn >= 0 && queryn < queryLast {
					querystate = queryAct[queryn] /* simulate a shift of "error" */
					if queryChk[querystate] == queryErrCode {
						goto querystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if queryDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", queryS[queryp].yys)
				}
				queryp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if queryDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", queryTokname(querytoken))
			}
			if querytoken == queryEofCode {
				goto ret1
			}
			queryrcvr.char = -1
			querytoken = -1
			goto querynewstate /* try again in the same state */
		}
	}

	/* reduction by production queryn */
	if queryDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", queryn, queryStatname(querystate))
	}

	querynt := queryn
	querypt := queryp
	_ = querypt // guard against "declared and not used"

	queryp -= queryR2[queryn]
	// queryp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if queryp+1 >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryVAL = queryS[queryp+1]

	/* consult goto table to find next state */
	queryn = queryR1[queryn]
	queryg := queryPgo[queryn]
	queryj := queryg + queryS[queryp].yys + 1

	if queryj >= queryLast {
		querystate = queryAct[queryg]
	} else {
		querystate = queryAct[queryj]
		if queryChk[querystate] != -queryn {
			querystate = queryAct[queryg]
		}
	}
	// dummy call; replaced with literal code
	switch querynt {

	case 1:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:25
		{

		}
	case 3:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:32
		{
			queryVAL.query = &DocElem{queryDollar[2].query}
		}
	case 4:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:36
		{
			queryVAL.query = &AllElems{queryDollar[3].query}
		}
	case 5:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:40
		{
			queryVAL.query = queryDollar[3].query
		}
	case 6:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:44
		{
			queryVAL.query = &ChildElems{queryDollar[4].query}
		}
	case 8:
		queryDollar = queryS[querypt-6 : querypt+1]
//line query.y:52
		{
			queryVAL.query = &WithIndex{queryDollar[1].query, -1}
		}
	case 9:
		queryDollar = queryS[querypt-8 : querypt+1]
//line query.y:56
		{
			queryVAL.query = &WithPosition{queryDollar[1].query, queryDollar[6].str, queryDollar[7].num}
		}
	case 10:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:60
		{
			queryVAL.query = &WithIndex{queryDollar[1].query, queryDollar[3].num}
		}
	case 11:
		queryDollar = queryS[querypt-5 : querypt+1]
//line query.y:64
		{
			queryVAL.query = &WithAttr{queryDollar[1].query, queryDollar[4].str}
		}
	case 12:
		queryDollar = queryS[querypt-9 : querypt+1]
//line query.y:68
		{
			queryVAL.query = &WithAttrValue{queryDollar[1].query, queryDollar[4].str, queryDollar[7].str}
		}
	case 14:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:75
		{
			queryVAL.str = queryDollar[1].str + queryDollar[2].str
		}
	case 17:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:81
		{
			queryVAL.str = queryDollar[1].str + queryDollar[2].str
		}
	case 18:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:85
		{
			queryVAL.str = queryDollar[1].str + queryDollar[2].str
		}
	case 19:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:91
		{
			queryVAL.query = &WithName{queryDollar[1].str}
		}
	case 20:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:95
		{
			queryVAL.query = queryDollar[2].query
		}
	}
	goto querystack /* stack new state and value */
}
