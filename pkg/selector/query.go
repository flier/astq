// Code generated by goyacc -o query.go -p query query.y. DO NOT EDIT.

//line query.y:2
package selector

import __yyfmt__ "fmt"

//line query.y:2

//line query.y:6
type querySymType struct {
	yys     int
	query   Query
	path    Path
	step    *Step
	expr    Expr
	args    []Expr
	str     string
	num     int
	boolean bool
	dir     AxisDirection
	axis    *Axis
}

const ID = 57346
const STR = 57347
const LAST = 57348
const POSITION = 57349
const NUM = 57350
const BOOL = 57351

var queryToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'['",
	"']'",
	"'('",
	"')'",
	"':'",
	"'@'",
	"'.'",
	"'\"'",
	"'~'",
	"'='",
	"','",
	"ID",
	"STR",
	"LAST",
	"POSITION",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'^'",
	"'%'",
	"'&'",
	"'|'",
	"'>'",
	"'<'",
	"'!'",
	"NUM",
	"BOOL",
	"'?'",
	"'{'",
	"'}'",
	"'t'",
	"'r'",
	"'u'",
	"'e'",
	"'f'",
	"'a'",
	"'l'",
	"'s'",
	"'n'",
}
var queryStatenames = [...]string{}

const queryEofCode = 1
const queryErrCode = 2
const queryInitialStackSize = 16

//line query.y:268

//line yacctab:1
var queryExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const queryPrivate = 57344

const queryLast = 214

var queryAct = [...]int{

	35, 20, 129, 54, 116, 130, 49, 123, 122, 47,
	96, 133, 48, 51, 128, 121, 97, 95, 4, 119,
	111, 22, 19, 34, 22, 58, 46, 52, 107, 106,
	50, 99, 55, 12, 110, 15, 56, 69, 7, 8,
	57, 68, 14, 13, 9, 11, 59, 88, 89, 21,
	17, 16, 19, 109, 67, 94, 54, 27, 101, 49,
	66, 98, 47, 65, 64, 48, 51, 63, 108, 26,
	32, 31, 100, 102, 103, 104, 105, 30, 29, 46,
	52, 7, 8, 50, 28, 55, 25, 9, 3, 56,
	93, 118, 18, 57, 54, 91, 92, 49, 61, 62,
	47, 126, 125, 48, 51, 115, 114, 33, 127, 113,
	112, 24, 5, 90, 22, 1, 6, 46, 52, 23,
	10, 50, 53, 55, 124, 131, 75, 56, 132, 80,
	74, 57, 73, 72, 60, 82, 83, 84, 85, 87,
	86, 76, 77, 79, 78, 81, 120, 117, 71, 45,
	44, 43, 80, 42, 41, 40, 39, 38, 82, 83,
	84, 85, 87, 86, 76, 77, 79, 78, 81, 70,
	37, 71, 36, 2, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 87, 86, 76,
	77, 79, 78, 81, 80, 0, 71, 0, 0, 0,
	82, 83, 84, 85, 87, 86, 76, 77, 79, 78,
	81, 0, 0, 71,
}
var queryPact = [...]int{

	23, -1000, 78, 23, -1000, 20, 66, -1000, -1000, -1000,
	103, 64, 47, 62, 56, 55, 49, 48, 23, -1000,
	-1000, 110, 88, 17, 83, -1000, 45, 42, 41, 38,
	32, 19, 15, 23, -1000, 164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 88, 88, 107, 80,
	75, -1000, -1000, -1000, 88, -19, -30, -21, -1000, 110,
	-1000, -1000, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000,
	-1000, 50, 88, 88, 88, 88, 4, 2, 40, 7,
	97, 93, -1000, -1000, -1000, -1000, -1000, -1000, 181, 181,
	-3, -1000, -1000, -15, 139, -22, -33, -34, -1000, -1000,
	116, 88, 181, 181, 181, 181, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 94, 181, -1000,
	-1000, -24, -40, -36, 88, 181, -1000, 88, -1000, -27,
	-1000, 181, 181, -1000,
}
var queryPgo = [...]int{

	0, 173, 88, 18, 1, 0, 172, 170, 157, 156,
	155, 154, 153, 151, 150, 149, 147, 134, 112, 133,
	132, 130, 126, 122, 120, 116, 115,
}
var queryR1 = [...]int{

	0, 26, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 18, 18, 18, 4, 25, 25, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 17, 17, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 6, 6, 7, 7, 19, 19,
	8, 8, 20, 20, 20, 20, 9, 21, 21, 21,
	21, 21, 21, 21, 21, 10, 22, 22, 22, 22,
	22, 22, 11, 11, 16, 16, 12, 12, 13, 14,
	14, 14, 23, 23, 23, 15,
}
var queryR2 = [...]int{

	0, 1, 1, 3, 1, 2, 1, 2, 3, 2,
	3, 4, 1, 1, 1, 3, 1, 3, 1, 2,
	2, 3, 2, 3, 2, 3, 2, 3, 3, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 5, 4, 3, 2, 2, 2,
	3, 2, 1, 1, 2, 2, 3, 2, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 1, 3, 4, 1, 3, 2, 2, 3, 1,
	1, 1, 4, 5, 4, 3,
}
var queryChk = [...]int{

	-1000, -26, -1, -2, -3, -18, -25, 15, 16, 21,
	-24, 22, 10, 20, 19, 12, 28, 27, 14, -3,
	-4, 29, 4, -18, 8, 22, 22, 10, 22, 22,
	22, 22, 22, -2, -4, -5, -6, -7, -8, -9,
	-10, -11, -12, -13, -14, -15, 29, 12, 15, 9,
	33, 16, 30, -23, 6, 35, 39, 43, -4, 29,
	-17, 15, 16, 22, 22, 22, 22, 22, 22, 22,
	5, 32, -19, -20, -21, -22, 25, 26, 28, 27,
	13, 29, 19, 20, 21, 22, 24, 23, -5, -5,
	6, 15, 16, 15, -5, 36, 40, 37, -4, 22,
	-5, 8, -5, -5, -5, -5, 25, 26, 28, 13,
	27, 13, 13, 12, 13, 12, 7, -16, -5, 34,
	7, 37, 41, 41, 8, -5, 7, 14, 38, 42,
	41, -5, -5, 38,
}
var queryDef = [...]int{

	0, -2, 1, 2, 4, 6, 0, 12, 13, 14,
	16, 18, 0, 0, 0, 0, 0, 0, 0, 5,
	7, 0, 0, 9, 0, 19, 20, 0, 22, 24,
	26, 0, 0, 3, 8, 0, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 0, 0, 0, 0,
	0, 79, 80, 81, 0, 0, 0, 0, 10, 0,
	17, 32, 33, 21, 28, 23, 25, 27, 30, 31,
	15, 0, 0, 0, 0, 0, 52, 53, 61, 62,
	0, 0, 66, 67, 68, 69, 70, 71, 47, 51,
	0, 76, 77, 0, 0, 0, 0, 0, 11, 29,
	0, 0, 46, 50, 56, 65, 48, 49, 54, 59,
	55, 60, 57, 63, 58, 64, 72, 0, 74, 78,
	85, 0, 0, 0, 0, 45, 73, 0, 82, 0,
	84, 44, 75, 83,
}
var queryTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 29, 11, 3, 3, 24, 25, 3,
	6, 7, 21, 19, 14, 20, 10, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 8, 3,
	28, 13, 27, 32, 9, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 5, 23, 3, 3, 40, 3, 3,
	3, 38, 39, 3, 3, 3, 3, 3, 41, 3,
	43, 3, 3, 3, 36, 42, 35, 37, 3, 3,
	3, 3, 3, 33, 26, 34, 12,
}
var queryTok2 = [...]int{

	2, 3, 15, 16, 17, 18, 30, 31,
}
var queryTok3 = [...]int{
	0,
}

var queryErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	queryDebug        = 0
	queryErrorVerbose = false
)

type queryLexer interface {
	Lex(lval *querySymType) int
	Error(s string)
}

type queryParser interface {
	Parse(queryLexer) int
	Lookahead() int
}

type queryParserImpl struct {
	lval  querySymType
	stack [queryInitialStackSize]querySymType
	char  int
}

func (p *queryParserImpl) Lookahead() int {
	return p.char
}

func queryNewParser() queryParser {
	return &queryParserImpl{}
}

const queryFlag = -1000

func queryTokname(c int) string {
	if c >= 1 && c-1 < len(queryToknames) {
		if queryToknames[c-1] != "" {
			return queryToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func queryStatname(s int) string {
	if s >= 0 && s < len(queryStatenames) {
		if queryStatenames[s] != "" {
			return queryStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func queryErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !queryErrorVerbose {
		return "syntax error"
	}

	for _, e := range queryErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + queryTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := queryPact[state]
	for tok := TOKSTART; tok-1 < len(queryToknames); tok++ {
		if n := base + tok; n >= 0 && n < queryLast && queryChk[queryAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if queryDef[state] == -2 {
		i := 0
		for queryExca[i] != -1 || queryExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; queryExca[i] >= 0; i += 2 {
			tok := queryExca[i]
			if tok < TOKSTART || queryExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if queryExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += queryTokname(tok)
	}
	return res
}

func querylex1(lex queryLexer, lval *querySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = queryTok1[0]
		goto out
	}
	if char < len(queryTok1) {
		token = queryTok1[char]
		goto out
	}
	if char >= queryPrivate {
		if char < queryPrivate+len(queryTok2) {
			token = queryTok2[char-queryPrivate]
			goto out
		}
	}
	for i := 0; i < len(queryTok3); i += 2 {
		token = queryTok3[i+0]
		if token == char {
			token = queryTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = queryTok2[1] /* unknown char */
	}
	if queryDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", queryTokname(token), uint(char))
	}
	return char, token
}

func queryParse(querylex queryLexer) int {
	return queryNewParser().Parse(querylex)
}

func (queryrcvr *queryParserImpl) Parse(querylex queryLexer) int {
	var queryn int
	var queryVAL querySymType
	var queryDollar []querySymType
	_ = queryDollar // silence set and not used
	queryS := queryrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	querystate := 0
	queryrcvr.char = -1
	querytoken := -1 // queryrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		querystate = -1
		queryrcvr.char = -1
		querytoken = -1
	}()
	queryp := -1
	goto querystack

ret0:
	return 0

ret1:
	return 1

querystack:
	/* put a state and value onto the stack */
	if queryDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", queryTokname(querytoken), queryStatname(querystate))
	}

	queryp++
	if queryp >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryS[queryp] = queryVAL
	queryS[queryp].yys = querystate

querynewstate:
	queryn = queryPact[querystate]
	if queryn <= queryFlag {
		goto querydefault /* simple state */
	}
	if queryrcvr.char < 0 {
		queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
	}
	queryn += querytoken
	if queryn < 0 || queryn >= queryLast {
		goto querydefault
	}
	queryn = queryAct[queryn]
	if queryChk[queryn] == querytoken { /* valid shift */
		queryrcvr.char = -1
		querytoken = -1
		queryVAL = queryrcvr.lval
		querystate = queryn
		if Errflag > 0 {
			Errflag--
		}
		goto querystack
	}

querydefault:
	/* default state action */
	queryn = queryDef[querystate]
	if queryn == -2 {
		if queryrcvr.char < 0 {
			queryrcvr.char, querytoken = querylex1(querylex, &queryrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if queryExca[xi+0] == -1 && queryExca[xi+1] == querystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			queryn = queryExca[xi+0]
			if queryn < 0 || queryn == querytoken {
				break
			}
		}
		queryn = queryExca[xi+1]
		if queryn < 0 {
			goto ret0
		}
	}
	if queryn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			querylex.Error(queryErrorMessage(querystate, querytoken))
			Nerrs++
			if queryDebug >= 1 {
				__yyfmt__.Printf("%s", queryStatname(querystate))
				__yyfmt__.Printf(" saw %s\n", queryTokname(querytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for queryp >= 0 {
				queryn = queryPact[queryS[queryp].yys] + queryErrCode
				if queryn >= 0 && queryn < queryLast {
					querystate = queryAct[queryn] /* simulate a shift of "error" */
					if queryChk[querystate] == queryErrCode {
						goto querystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if queryDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", queryS[queryp].yys)
				}
				queryp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if queryDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", queryTokname(querytoken))
			}
			if querytoken == queryEofCode {
				goto ret1
			}
			queryrcvr.char = -1
			querytoken = -1
			goto querynewstate /* try again in the same state */
		}
	}

	/* reduction by production queryn */
	if queryDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", queryn, queryStatname(querystate))
	}

	querynt := queryn
	querypt := queryp
	_ = querypt // guard against "declared and not used"

	queryp -= queryR2[queryn]
	// queryp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if queryp+1 >= len(queryS) {
		nyys := make([]querySymType, len(queryS)*2)
		copy(nyys, queryS)
		queryS = nyys
	}
	queryVAL = queryS[queryp+1]

	/* consult goto table to find next state */
	queryn = queryR1[queryn]
	queryg := queryPgo[queryn]
	queryj := queryg + queryS[queryp].yys + 1

	if queryj >= queryLast {
		querystate = queryAct[queryg]
	} else {
		querystate = queryAct[queryj]
		if queryChk[querystate] != -queryn {
			querystate = queryAct[queryg]
		}
	}
	// dummy call; replaced with literal code
	switch querynt {

	case 2:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:46
		{
			queryVAL.query = Query{queryDollar[1].path}
		}
	case 3:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:50
		{
			queryVAL.query = append(queryDollar[1].query, queryDollar[3].path)
		}
	case 4:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:56
		{
			queryVAL.path = Path{queryDollar[1].step}
		}
	case 5:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:60
		{
			queryVAL.path = append(queryDollar[1].path, queryDollar[2].step)
		}
	case 6:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:66
		{
			queryVAL.step = &Step{Match: queryDollar[1].str}
		}
	case 7:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:70
		{
			queryVAL.step = &Step{Match: queryDollar[1].str, Filter: queryDollar[2].expr}
		}
	case 8:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:74
		{
			queryVAL.step = &Step{Match: queryDollar[1].str, Filter: queryDollar[3].expr}
		}
	case 9:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:78
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str}
		}
	case 10:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:82
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str, Filter: queryDollar[3].expr}
		}
	case 11:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:86
		{
			queryVAL.step = &Step{Axis: queryDollar[1].axis, Match: queryDollar[2].str, Filter: queryDollar[4].expr}
		}
	case 15:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:97
		{
			queryVAL.expr = queryDollar[2].expr
		}
	case 16:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:103
		{
			queryVAL.axis = &Axis{Direction: queryDollar[1].dir}
		}
	case 17:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:107
		{
			queryVAL.axis = &Axis{queryDollar[1].dir, queryDollar[3].str}
		}
	case 18:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:112
		{
			queryVAL.dir = DirectChild
		}
	case 19:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:113
		{
			queryVAL.dir = AnyDescendant
		}
	case 20:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:114
		{
			queryVAL.dir = CurrentDirectChild
		}
	case 21:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:115
		{
			queryVAL.dir = CurrentAnyDescendant
		}
	case 22:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:116
		{
			queryVAL.dir = DirectLeftSibling
		}
	case 23:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:117
		{
			queryVAL.dir = AnyLeftSibling
		}
	case 24:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:118
		{
			queryVAL.dir = DirectRightSibling
		}
	case 25:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:119
		{
			queryVAL.dir = AnyRightSibling
		}
	case 26:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:120
		{
			queryVAL.dir = DirectLeftAndRightSibling
		}
	case 27:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:121
		{
			queryVAL.dir = AnyLeftAndRightSibling
		}
	case 28:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:122
		{
			queryVAL.dir = DirectParent
		}
	case 29:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:123
		{
			queryVAL.dir = AnyParent
		}
	case 30:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:124
		{
			queryVAL.dir = AnyPreceding
		}
	case 31:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:125
		{
			queryVAL.dir = AnyFollowing
		}
	case 44:
		queryDollar = queryS[querypt-5 : querypt+1]
//line query.y:145
		{
			queryVAL.expr = &Condition{queryDollar[1].expr, queryDollar[3].expr, queryDollar[5].expr}
		}
	case 45:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:149
		{
			queryVAL.expr = &Condition{queryDollar[1].expr, nil, queryDollar[4].expr}
		}
	case 46:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:155
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 47:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:159
		{
			queryVAL.expr = &Unary{queryDollar[1].str, queryDollar[2].expr}
		}
	case 48:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:164
		{
			queryVAL.str = "&&"
		}
	case 49:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:165
		{
			queryVAL.str = "||"
		}
	case 50:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:169
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 51:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:173
		{
			queryVAL.expr = &Unary{queryDollar[1].str, queryDollar[2].expr}
		}
	case 54:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:180
		{
			queryVAL.str = "<<"
		}
	case 55:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:181
		{
			queryVAL.str = ">>"
		}
	case 56:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:185
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 57:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:190
		{
			queryVAL.str = "=="
		}
	case 58:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:191
		{
			queryVAL.str = "!="
		}
	case 59:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:192
		{
			queryVAL.str = "<="
		}
	case 60:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:193
		{
			queryVAL.str = ">="
		}
	case 63:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:196
		{
			queryVAL.str = "=~"
		}
	case 64:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:197
		{
			queryVAL.str = "!~"
		}
	case 65:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:201
		{
			queryVAL.expr = &Binary{queryDollar[1].expr, queryDollar[2].str, queryDollar[3].expr}
		}
	case 72:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:215
		{
			queryVAL.expr = &FuncCall{queryDollar[1].str, nil}
		}
	case 73:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:219
		{
			queryVAL.expr = &FuncCall{queryDollar[1].str, queryDollar[3].args}
		}
	case 74:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:225
		{
			queryVAL.args = []Expr{queryDollar[1].expr}
		}
	case 75:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:229
		{
			queryVAL.args = append(queryDollar[1].args, queryDollar[3].expr)
		}
	case 76:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:234
		{
			queryVAL.expr = &Attr{queryDollar[2].str}
		}
	case 77:
		queryDollar = queryS[querypt-2 : querypt+1]
//line query.y:235
		{
			queryVAL.expr = &Attr{queryDollar[2].str}
		}
	case 78:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:239
		{
			queryVAL.expr = &QueryParam{queryDollar[2].str}
		}
	case 79:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:244
		{
			queryVAL.expr = Str(queryDollar[1].str)
		}
	case 80:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:245
		{
			queryVAL.expr = Num(queryDollar[1].num)
		}
	case 81:
		queryDollar = queryS[querypt-1 : querypt+1]
//line query.y:246
		{
			queryVAL.expr = Keyword(queryDollar[1].str)
		}
	case 82:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:250
		{
			queryVAL.str = "true"
		}
	case 83:
		queryDollar = queryS[querypt-5 : querypt+1]
//line query.y:254
		{
			queryVAL.str = "false"
		}
	case 84:
		queryDollar = queryS[querypt-4 : querypt+1]
//line query.y:258
		{
			queryVAL.str = "null"
		}
	case 85:
		queryDollar = queryS[querypt-3 : querypt+1]
//line query.y:264
		{
			queryVAL.expr = queryDollar[2].expr
		}
	}
	goto querystack /* stack new state and value */
}
