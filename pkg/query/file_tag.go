package query

// Code generated by astgen v1.0 with go1.11.2 DO NOT EDIT

// WithTagValue returns items contains tag which match the key and value
func (m ConstDeclIter) WithTagValue(key, value string) ConstDeclIter {
	return m.Filter(func(item *ConstDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m ConstDeclIter) WithTag(key string) ConstDeclIter {
	return m.Filter(func(item *ConstDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m ConstDeclIter) WithoutTag(key string) ConstDeclIter {
	return m.Filter(func(item *ConstDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m ConstDeclMap) WithTagValue(key, value string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m ConstDeclMap) WithTag(key string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m ConstDeclMap) WithoutTag(key string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m FuncDeclIter) WithTagValue(key, value string) FuncDeclIter {
	return m.Filter(func(item *FuncDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m FuncDeclIter) WithTag(key string) FuncDeclIter {
	return m.Filter(func(item *FuncDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m FuncDeclIter) WithoutTag(key string) FuncDeclIter {
	return m.Filter(func(item *FuncDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m FuncDeclMap) WithTagValue(key, value string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m FuncDeclMap) WithTag(key string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m FuncDeclMap) WithoutTag(key string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m GenDeclIter) WithTagValue(key, value string) GenDeclIter {
	return m.Filter(func(item *GenDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m GenDeclIter) WithTag(key string) GenDeclIter {
	return m.Filter(func(item *GenDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m GenDeclIter) WithoutTag(key string) GenDeclIter {
	return m.Filter(func(item *GenDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m ImportDeclIter) WithTagValue(key, value string) ImportDeclIter {
	return m.Filter(func(item *ImportDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m ImportDeclIter) WithTag(key string) ImportDeclIter {
	return m.Filter(func(item *ImportDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m ImportDeclIter) WithoutTag(key string) ImportDeclIter {
	return m.Filter(func(item *ImportDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m ImportDeclMap) WithTagValue(key, value string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m ImportDeclMap) WithTag(key string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m ImportDeclMap) WithoutTag(key string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m InterfaceIter) WithTagValue(key, value string) InterfaceIter {
	return m.Filter(func(item *InterfaceDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m InterfaceIter) WithTag(key string) InterfaceIter {
	return m.Filter(func(item *InterfaceDef) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m InterfaceIter) WithoutTag(key string) InterfaceIter {
	return m.Filter(func(item *InterfaceDef) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m InterfaceMap) WithTagValue(key, value string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m InterfaceMap) WithTag(key string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m InterfaceMap) WithoutTag(key string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m StructIter) WithTagValue(key, value string) StructIter {
	return m.Filter(func(item *StructDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m StructIter) WithTag(key string) StructIter {
	return m.Filter(func(item *StructDef) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m StructIter) WithoutTag(key string) StructIter {
	return m.Filter(func(item *StructDef) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m StructMap) WithTagValue(key, value string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m StructMap) WithTag(key string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m StructMap) WithoutTag(key string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m TypeDeclIter) WithTagValue(key, value string) TypeDeclIter {
	return m.Filter(func(item *TypeDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m TypeDeclIter) WithTag(key string) TypeDeclIter {
	return m.Filter(func(item *TypeDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m TypeDeclIter) WithoutTag(key string) TypeDeclIter {
	return m.Filter(func(item *TypeDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m TypeDeclMap) WithTagValue(key, value string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m TypeDeclMap) WithTag(key string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m TypeDeclMap) WithoutTag(key string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m VarDeclIter) WithTagValue(key, value string) VarDeclIter {
	return m.Filter(func(item *VarDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m VarDeclIter) WithTag(key string) VarDeclIter {
	return m.Filter(func(item *VarDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m VarDeclIter) WithoutTag(key string) VarDeclIter {
	return m.Filter(func(item *VarDecl) bool {
		return !item.Tags().Contains(key)
	})
}

// WithTagValue returns items contains tag which match the key and value
func (m VarDeclMap) WithTagValue(key, value string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

// WithTag returns items with the tag
func (m VarDeclMap) WithTag(key string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		return item.Tags().Contains(key)
	})
}

// WithTag returns items without the tag
func (m VarDeclMap) WithoutTag(key string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		return !item.Tags().Contains(key)
	})
}
