package query

// Code generated by astgen v1.0 with go1.11.2 DO NOT EDIT

func (m ConstDeclMap) WithTagValue(key, value string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m ConstDeclMap) WithTag(key string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m ConstDeclMap) WithoutTag(key string) ConstDeclMap {
	return m.Filter(func(_name string, item *ConstDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m FuncDeclMap) WithTagValue(key, value string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m FuncDeclMap) WithTag(key string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m FuncDeclMap) WithoutTag(key string) FuncDeclMap {
	return m.Filter(func(_name string, item *FuncDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m ImportDeclMap) WithTagValue(key, value string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m ImportDeclMap) WithTag(key string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m ImportDeclMap) WithoutTag(key string) ImportDeclMap {
	return m.Filter(func(_name string, item *ImportDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m InterfaceMap) WithTagValue(key, value string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m InterfaceMap) WithTag(key string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m InterfaceMap) WithoutTag(key string) InterfaceMap {
	return m.Filter(func(_name string, item *InterfaceDef) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m StructMap) WithTagValue(key, value string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m StructMap) WithTag(key string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m StructMap) WithoutTag(key string) StructMap {
	return m.Filter(func(_name string, item *StructDef) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m TypeDeclMap) WithTagValue(key, value string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m TypeDeclMap) WithTag(key string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m TypeDeclMap) WithoutTag(key string) TypeDeclMap {
	return m.Filter(func(_name string, item *TypeDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}

func (m VarDeclMap) WithTagValue(key, value string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		tags := item.Tags()
		v, found := tags[key]

		return found && v == value
	})
}

func (m VarDeclMap) WithTag(key string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return found
	})
}

func (m VarDeclMap) WithoutTag(key string) VarDeclMap {
	return m.Filter(func(_name string, item *VarDecl) bool {
		tags := item.Tags()
		_, found := tags[key]

		return !found
	})
}
