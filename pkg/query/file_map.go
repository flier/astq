package query

// Code generated by astgen v1.0 with go1.11.2 DO NOT EDIT

import (
	"strings"
)

// Keys returns a new slice containing the set of map keys. The order is unspecified.
func (m FileMap) Keys() (keys []string) {
	for name := range m {
		keys = append(keys, name)
	}

	return
}

// Values returns a new slice containing the set of map values. The order is unspecified.
func (m FileMap) Values() (values []*File) {
	for _, value := range m {
		values = append(values, value)
	}

	return
}

// Contains reports whether key is within map.
func (m FileMap) Contains(key string) bool {
	_, found := m[key]

	return found
}

// Clone returns a shadow copy of map.
func (m FileMap) Clone() FileMap {
	cloned := make(FileMap)

	for key, value := range m {
		cloned[key] = value
	}

	return cloned
}

// Filter filters the map to only include elements for which filter returns true.
func (m FileMap) Filter(filter func(key string, value *File) bool) FileMap {
	filtered := make(FileMap)

	for key, value := range m {
		if filter(key, value) {
			filtered[key] = value
		}
	}

	return filtered
}

// WithPrefix filters the map to only include elements for which contains prefix.
func (m FileMap) WithPrefix(prefix string) FileMap {
	return m.Filter(func(key string, value *File) bool {
		return strings.HasPrefix(key, prefix)
	})
}

// WithSuffix filters the map to only include elements for which contains suffix.
func (m FileMap) WithSuffix(suffix string) FileMap {
	return m.Filter(func(key string, value *File) bool {
		return strings.HasSuffix(key, suffix)
	})
}
