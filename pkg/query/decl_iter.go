package query

// Code generated by astgen v1.0 with go1.11.2 DO NOT EDIT

// Filter filters the iterator to only include elements for which filter returns true.
func (c ConstDeclIter) Filter(filter func(item *ConstDecl) bool) ConstDeclIter {
	filtered := make(chan *ConstDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c ConstDeclIter) Find(filter func(item *ConstDecl) bool) *ConstDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c ConstDeclIter) Collect() (items []*ConstDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c FuncDeclIter) Filter(filter func(item *FuncDecl) bool) FuncDeclIter {
	filtered := make(chan *FuncDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c FuncDeclIter) Find(filter func(item *FuncDecl) bool) *FuncDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c FuncDeclIter) Collect() (items []*FuncDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c GenDeclIter) Filter(filter func(item *GenDecl) bool) GenDeclIter {
	filtered := make(chan *GenDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c GenDeclIter) Find(filter func(item *GenDecl) bool) *GenDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c GenDeclIter) Collect() (items []*GenDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c ImportDeclIter) Filter(filter func(item *ImportDecl) bool) ImportDeclIter {
	filtered := make(chan *ImportDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c ImportDeclIter) Find(filter func(item *ImportDecl) bool) *ImportDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c ImportDeclIter) Collect() (items []*ImportDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c InterfaceIter) Filter(filter func(item *InterfaceDef) bool) InterfaceIter {
	filtered := make(chan *InterfaceDef)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c InterfaceIter) Find(filter func(item *InterfaceDef) bool) *InterfaceDef {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c InterfaceIter) Collect() (items []*InterfaceDef) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c StructIter) Filter(filter func(item *StructDef) bool) StructIter {
	filtered := make(chan *StructDef)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c StructIter) Find(filter func(item *StructDef) bool) *StructDef {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c StructIter) Collect() (items []*StructDef) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c TypeDeclIter) Filter(filter func(item *TypeDecl) bool) TypeDeclIter {
	filtered := make(chan *TypeDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c TypeDeclIter) Find(filter func(item *TypeDecl) bool) *TypeDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c TypeDeclIter) Collect() (items []*TypeDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}

// Filter filters the iterator to only include elements for which filter returns true.
func (c VarDeclIter) Filter(filter func(item *VarDecl) bool) VarDeclIter {
	filtered := make(chan *VarDecl)

	go func() {
		defer close(filtered)

		for item := range c {
			if filter(item) {
				filtered <- item
			}
		}
	}()

	return filtered
}

// Find returns the item for which filter returns true.
func (c VarDeclIter) Find(filter func(item *VarDecl) bool) *VarDecl {
	for item := range c {
		if filter(item) {
			return item
		}
	}

	return nil
}

// Collect returns a new slice including all items from the iterator.
func (c VarDeclIter) Collect() (items []*VarDecl) {
	for item := range c {
		items = append(items, item)
	}

	return
}
