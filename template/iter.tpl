package {{ .Package.Name }}

// Code generated by {{ .Generator }} with {{ .GoVersion }} DO NOT EDIT

{{ with .File }}
{{   range ( .TypeDecls.WithTag "iter" ) }}
{{     if .Type.IsChan }}
{{       if .Type.CanRecv }}
// Filter filters the iterator to only include elements for which filter returns true.
func (c {{ .Name }}) Filter(filter func(item {{ .Type.Elem }}) bool) {{ .Name }} {
    filtered := make(chan {{ .Type.Elem }})

    go func() {
        defer close(filtered)

        for item := range c {
            if filter(item) {
                filtered <- item
            }
        }
    }()

    return filtered
}

// Find returns the item for which filter returns true.
func (c {{ .Name }}) Find(filter func(item {{ .Type.Elem }}) bool) {{ .Type.Elem }} {
    for item := range c {
        if filter(item) {
            return item
        }
    }

    return nil
}

// Collect returns a new slice including all items from the iterator.
func (c {{ .Name }}) Collect() (items []{{ .Type.Elem }}) {
    for item := range c {
        items = append(items, item)
    }

    return
}
{{       end }}
{{     end }}
{{   end }}
{{ end }}
